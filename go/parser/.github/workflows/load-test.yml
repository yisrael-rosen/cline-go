name: Load Testing

on:
  schedule:
    - cron: '0 0 * * 1'  # Run every Monday
  workflow_dispatch:
    inputs:
      concurrent_users:
        description: 'Number of concurrent users'
        required: true
        default: '100'
      duration:
        description: 'Test duration in minutes'
        required: true
        default: '5'

jobs:
  setup-test-data:
    name: Setup Test Data
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Generate Test Files
        run: |
          mkdir -p testdata/load-test
          # Generate multiple test files with different sizes
          for size in 10 100 1000; do
            cat > "testdata/load-test/test_${size}.go" << EOL
            package test
            
            $(for i in $(seq 1 $size); do
              echo "func Process${i}(data []byte) error { return nil }"
            done)
            
            $(for i in $(seq 1 $size); do
              echo "type Type${i} struct { Field${i} string }"
            done)
            EOL
          done

      - name: Upload Test Data
        uses: actions/upload-artifact@v3
        with:
          name: test-data
          path: testdata/load-test

  concurrent-edits:
    name: Concurrent Editing Test
    needs: setup-test-data
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Download Test Data
        uses: actions/download-artifact@v3
        with:
          name: test-data
          path: testdata/load-test

      - name: Install k6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz | tar xz
          sudo cp k6-v0.45.0-linux-amd64/k6 /usr/local/bin

      - name: Create Load Test Script
        run: |
          cat > load-test.js << 'EOL'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export const options = {
            vus: ${{ github.event.inputs.concurrent_users || 100 }},
            duration: '${{ github.event.inputs.duration || 5 }}m',
            thresholds: {
              http_req_duration: ['p(95)<500'],
              http_req_failed: ['rate<0.01'],
            },
          };

          const testFiles = [
            'test_10.go',
            'test_100.go',
            'test_1000.go'
          ];

          const editOperations = [
            {
              type: 'add-context',
              pattern: 'Process\\d+',
            },
            {
              type: 'add-tags',
              pattern: 'Type\\d+',
            }
          ];

          export default function () {
            const file = testFiles[Math.floor(Math.random() * testFiles.length)];
            const op = editOperations[Math.floor(Math.random() * editOperations.length)];
            
            const payload = {
              file: `testdata/load-test/${file}`,
              operation: op.type,
              pattern: op.pattern,
            };

            const res = http.post('http://localhost:8080/edit', JSON.stringify(payload), {
              headers: { 'Content-Type': 'application/json' },
            });

            check(res, {
              'status is 200': (r) => r.status === 200,
              'response has success': (r) => r.json('success') === true,
            });

            sleep(1);
          }
          EOL

      - name: Start Server
        run: |
          go run cmd/server/main.go &
          sleep 5  # Wait for server to start

      - name: Run Load Test
        run: k6 run load-test.js

  parallel-processing:
    name: Parallel Processing Test
    needs: setup-test-data
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Download Test Data
        uses: actions/download-artifact@v3
        with:
          name: test-data
          path: testdata/load-test

      - name: Run Parallel Tests
        run: |
          go test -v -run=TestParallelEdits -parallel 4 ./parser/...

  memory-leak:
    name: Memory Leak Test
    needs: setup-test-data
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Download Test Data
        uses: actions/download-artifact@v3
        with:
          name: test-data
          path: testdata/load-test

      - name: Run Memory Test
        run: |
          go test -v -run=TestMemoryUsage -memprofile=mem.prof ./parser/...
          go tool pprof -svg mem.prof > memory_leak.svg

      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: memory-leak-results
          path: |
            mem.prof
            memory_leak.svg

  report:
    name: Generate Load Test Report
    needs: [concurrent-edits, parallel-processing, memory-leak]
    runs-on: ubuntu-latest
    steps:
      - name: Download Results
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate Report
        run: |
          echo "# Load Test Results" > report.md
          echo "## Concurrent Users: ${{ github.event.inputs.concurrent_users || 100 }}" >> report.md
          echo "## Duration: ${{ github.event.inputs.duration || 5 }} minutes" >> report.md
          echo "## Memory Profile" >> report.md
          echo "![Memory Profile](artifacts/memory-leak-results/memory_leak.svg)" >> report.md

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: load-test-report
          path: report.md

      - name: Post Results
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
