name: Error Simulation Testing

on:
  schedule:
    - cron: '0 0 * * 5'  # Run every Friday
  workflow_dispatch:
    inputs:
      error_rate:
        description: 'Error injection rate (0-100)'
        required: true
        default: '20'

jobs:
  syntax-errors:
    name: Syntax Error Simulation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Generate Malformed Code
        run: |
          mkdir -p testdata/errors
          # Generate files with various syntax errors
          for error in missing_brace incomplete_func invalid_type; do
            case $error in
              missing_brace)
                echo "func Test() {" > testdata/errors/missing_brace.go
                ;;
              incomplete_func)
                echo "func Test(" > testdata/errors/incomplete_func.go
                ;;
              invalid_type)
                echo "type Test struct {" > testdata/errors/invalid_type.go
                echo "  Field invalid.type" >> testdata/errors/invalid_type.go
                echo "}" >> testdata/errors/invalid_type.go
                ;;
            esac
          done

      - name: Test Error Handling
        run: |
          go test -v -run=TestSyntaxErrors \
            -error-rate=${{ github.event.inputs.error_rate || 20 }} \
            ./parser/...

  semantic-errors:
    name: Semantic Error Simulation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Generate Invalid Code
        run: |
          mkdir -p testdata/errors
          # Generate files with semantic errors
          for error in undefined_symbol type_mismatch duplicate_decl; do
            case $error in
              undefined_symbol)
                echo "func Test() { undefined() }" > testdata/errors/undefined_symbol.go
                ;;
              type_mismatch)
                echo "func Test() string { return 42 }" > testdata/errors/type_mismatch.go
                ;;
              duplicate_decl)
                echo "type Test struct {}" > testdata/errors/duplicate_decl.go
                echo "type Test interface {}" >> testdata/errors/duplicate_decl.go
                ;;
            esac
          done

      - name: Test Error Handling
        run: |
          go test -v -run=TestSemanticErrors \
            -error-rate=${{ github.event.inputs.error_rate || 20 }} \
            ./parser/...

  edge-cases:
    name: Edge Case Simulation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Generate Edge Cases
        run: |
          mkdir -p testdata/errors
          # Generate files with edge cases
          for case in empty_file huge_line nested_gen; do
            case $case in
              empty_file)
                touch testdata/errors/empty.go
                ;;
              huge_line)
                python3 -c "print('func Test() { ' + 'x' * 1000000 + ' }')" > testdata/errors/huge_line.go
                ;;
              nested_gen)
                echo "func Test() {" > testdata/errors/nested_gen.go
                for i in {1..1000}; do
                  echo "  {" >> testdata/errors/nested_gen.go
                done
                for i in {1..1000}; do
                  echo "  }" >> testdata/errors/nested_gen.go
                done
                echo "}" >> testdata/errors/nested_gen.go
                ;;
            esac
          done

      - name: Test Error Handling
        run: |
          go test -v -run=TestEdgeCases \
            -error-rate=${{ github.event.inputs.error_rate || 20 }} \
            ./parser/...

  error-recovery:
    name: Error Recovery Simulation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Test Partial Recovery
        run: |
          go test -v -run=TestPartialRecovery \
            -error-rate=${{ github.event.inputs.error_rate || 20 }} \
            ./parser/...

      - name: Test Graceful Degradation
        run: |
          go test -v -run=TestGracefulDegradation \
            -error-rate=${{ github.event.inputs.error_rate || 20 }} \
            ./parser/...

      - name: Test State Cleanup
        run: |
          go test -v -run=TestStateCleanup \
            -error-rate=${{ github.event.inputs.error_rate || 20 }} \
            ./parser/...

  error-combinations:
    name: Error Combination Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Test Multiple Errors
        run: |
          go test -v -run=TestMultipleErrors \
            -error-rate=${{ github.event.inputs.error_rate || 20 }} \
            ./parser/...

      - name: Test Cascading Errors
        run: |
          go test -v -run=TestCascadingErrors \
            -error-rate=${{ github.event.inputs.error_rate || 20 }} \
            ./parser/...

      - name: Test Error Interactions
        run: |
          go test -v -run=TestErrorInteractions \
            -error-rate=${{ github.event.inputs.error_rate || 20 }} \
            ./parser/...

  report:
    name: Generate Error Simulation Report
    needs: [syntax-errors, semantic-errors, edge-cases, error-recovery, error-combinations]
    runs-on: ubuntu-latest
    steps:
      - name: Collect Test Results
        run: |
          echo "# Error Simulation Results" > report.md
          echo "## Configuration" >> report.md
          echo "- Error Rate: ${{ github.event.inputs.error_rate || 20 }}%" >> report.md
          
          echo "## Syntax Errors" >> report.md
          go tool test2json ./parser/... | jq -r 'select(.Test | contains("TestSyntax"))' >> report.md
          
          echo "## Semantic Errors" >> report.md
          go tool test2json ./parser/... | jq -r 'select(.Test | contains("TestSemantic"))' >> report.md
          
          echo "## Edge Cases" >> report.md
          go tool test2json ./parser/... | jq -r 'select(.Test | contains("TestEdge"))' >> report.md
          
          echo "## Error Recovery" >> report.md
          go tool test2json ./parser/... | jq -r 'select(.Test | contains("TestRecovery"))' >> report.md
          
          echo "## Error Combinations" >> report.md
          go tool test2json ./parser/... | jq -r 'select(.Test | contains("TestMultiple"))' >> report.md

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: error-simulation-report
          path: report.md

      - name: Post Results
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
