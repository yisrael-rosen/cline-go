name: Pattern Visualization

on:
  workflow_run:
    workflows: ["Pattern Analysis"]
    types:
      - completed

jobs:
  create-visualizations:
    name: Create Pattern Visualizations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install matplotlib seaborn networkx pandas plotly

      - name: Download Analysis Results
        uses: actions/download-artifact@v3
        with:
          path: analysis-results

      - name: Create Frequency Chart
        run: |
          python3 -c '
          import pandas as pd
          import matplotlib.pyplot as plt
          import seaborn as sns
          
          # Read frequency data
          df = pd.read_csv("analysis-results/frequency-report/frequency_report.md", 
                          sep=" - ", names=["count", "error"])
          
          # Create bar chart
          plt.figure(figsize=(12, 6))
          sns.barplot(data=df.head(10), x="count", y="error")
          plt.title("Top 10 Most Common Error Patterns")
          plt.tight_layout()
          plt.savefig("frequency_chart.png")
          '

      - name: Create Correlation Network
        run: |
          python3 -c '
          import networkx as nx
          import matplotlib.pyplot as plt
          import json
          
          # Read correlation data
          with open("analysis-results/correlation-report/correlation_report.md") as f:
              data = f.read()
          
          # Create graph
          G = nx.Graph()
          for line in data.split("\n"):
              if "<->" in line:
                  t1, rest = line.split(" <-> ")
                  t2, count = rest.split(": ")
                  count = int(count.split(" ")[0])
                  G.add_edge(t1, t2, weight=count)
          
          # Draw graph
          plt.figure(figsize=(12, 8))
          pos = nx.spring_layout(G)
          nx.draw(G, pos, with_labels=True, 
                 node_color="lightblue", 
                 node_size=1000,
                 font_size=8,
                 width=[G[u][v]["weight"] for u,v in G.edges()])
          plt.title("Error Pattern Correlations")
          plt.savefig("correlation_network.png")
          '

      - name: Create Trend Heatmap
        run: |
          python3 -c '
          import pandas as pd
          import seaborn as sns
          import matplotlib.pyplot as plt
          
          # Read trend data
          with open("analysis-results/trend-report/trend_report.md") as f:
              data = f.read()
          
          # Parse data into DataFrame
          packages = []
          errors = []
          counts = []
          current_package = ""
          for line in data.split("\n"):
              if line.startswith("Package:"):
                  current_package = line.split(": ")[1]
              elif line.strip().startswith("-"):
                  count, error = line.strip().split(" - ", 1)
                  packages.append(current_package)
                  errors.append(error)
                  counts.append(int(count))
          
          df = pd.DataFrame({
              "package": packages,
              "error": errors,
              "count": counts
          })
          
          # Create pivot table
          pivot = df.pivot(index="package", columns="error", values="count")
          pivot = pivot.fillna(0)
          
          # Create heatmap
          plt.figure(figsize=(15, 8))
          sns.heatmap(pivot, annot=True, fmt="g", cmap="YlOrRd")
          plt.title("Error Pattern Distribution by Package")
          plt.xticks(rotation=45, ha="right")
          plt.tight_layout()
          plt.savefig("trend_heatmap.png")
          '

      - name: Create Fix Success Rate Chart
        run: |
          python3 -c '
          import pandas as pd
          import plotly.express as px
          
          # Read fix data
          with open("analysis-results/fix-report/fix_report.md") as f:
              data = f.read()
          
          # Parse data
          errors = []
          fix_counts = []
          current_error = ""
          fix_count = 0
          for line in data.split("\n"):
              if line.startswith("Error:"):
                  if current_error:
                      errors.append(current_error)
                      fix_counts.append(fix_count)
                  current_error = line.split(": ")[1]
                  fix_count = 0
              elif line.strip().startswith("-"):
                  fix_count += 1
          
          if current_error:
              errors.append(current_error)
              fix_counts.append(fix_count)
          
          # Create DataFrame
          df = pd.DataFrame({
              "error": errors,
              "fixes": fix_counts
          })
          
          # Create donut chart
          fig = px.pie(df, values="fixes", names="error", hole=0.3,
                      title="Fix Distribution by Error Type")
          fig.write_html("fix_distribution.html")
          '

      - name: Create Pattern Evolution Chart
        run: |
          python3 -c '
          import pandas as pd
          import plotly.express as px
          import json
          
          # Read pattern data
          with open("analysis-results/error-patterns/patterns.json") as f:
              patterns = json.load(f)
          
          # Create timeline DataFrame
          df = pd.DataFrame(patterns)
          df["date"] = pd.to_datetime(df["test"].str.extract(r"(\d{8})")[0], 
                                    format="%Y%m%d")
          
          # Group by date and error type
          timeline = df.groupby(["date", "error"]).size().reset_index(name="count")
          
          # Create line chart
          fig = px.line(timeline, x="date", y="count", color="error",
                       title="Error Pattern Evolution Over Time")
          fig.write_html("pattern_evolution.html")
          '

      - name: Generate Visual Report
        run: |
          cat > visual_report.md << 'EOL'
          # Error Pattern Analysis Visualizations
          
          ## Frequency Distribution
          ![Frequency Chart](frequency_chart.png)
          
          ## Pattern Correlations
          ![Correlation Network](correlation_network.png)
          
          ## Package Trends
          ![Trend Heatmap](trend_heatmap.png)
          
          ## Interactive Visualizations
          - [Fix Distribution](fix_distribution.html)
          - [Pattern Evolution](pattern_evolution.html)
          
          ## Key Insights
          
          ### Common Patterns
          - Identified from frequency chart
          - Top patterns and their frequencies
          
          ### Pattern Relationships
          - Shown in correlation network
          - Highly connected patterns indicate related issues
          
          ### Package Distribution
          - Visualized in heatmap
          - Areas requiring focused attention
          
          ### Fix Success
          - Interactive donut chart shows fix distribution
          - Areas with high/low fix rates
          
          ### Evolution
          - Timeline shows pattern changes
          - Trends and improvements over time
          EOL

      - name: Upload Visualizations
        uses: actions/upload-artifact@v3
        with:
          name: pattern-visualizations
          path: |
            *.png
            *.html
            visual_report.md

      - name: Post Report
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('visual_report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
