name: Pattern Analysis

on:
  schedule:
    - cron: '0 0 * * 0'  # Run every Sunday
  workflow_dispatch:
    inputs:
      analysis_depth:
        description: 'Analysis depth (1-5)'
        required: true
        default: '3'

jobs:
  collect-patterns:
    name: Collect Error Patterns
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run Tests with Pattern Collection
        run: |
          go test -v ./parser/... \
            -analysis-depth=${{ github.event.inputs.analysis_depth || 3 }} \
            -json > test_output.json

      - name: Extract Patterns
        run: |
          jq -r '.[] | select(.Action=="fail") | {
            test: .Test,
            error: .Output,
            package: .Package
          }' test_output.json > patterns.json

      - name: Upload Patterns
        uses: actions/upload-artifact@v3
        with:
          name: error-patterns
          path: patterns.json

  analyze-frequency:
    name: Analyze Pattern Frequency
    needs: collect-patterns
    runs-on: ubuntu-latest
    steps:
      - name: Download Patterns
        uses: actions/download-artifact@v3
        with:
          name: error-patterns

      - name: Analyze Frequency
        run: |
          jq -r '.error' patterns.json | \
          sort | uniq -c | sort -nr > frequency.txt

      - name: Generate Report
        run: |
          echo "# Error Pattern Frequency" > frequency_report.md
          echo "\`\`\`" >> frequency_report.md
          cat frequency.txt >> frequency_report.md
          echo "\`\`\`" >> frequency_report.md

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: frequency-report
          path: frequency_report.md

  analyze-correlations:
    name: Analyze Pattern Correlations
    needs: collect-patterns
    runs-on: ubuntu-latest
    steps:
      - name: Download Patterns
        uses: actions/download-artifact@v3
        with:
          name: error-patterns

      - name: Analyze Correlations
        run: |
          jq -r '[.test, .error] | @csv' patterns.json | \
          python3 -c '
          import sys, csv, itertools
          from collections import defaultdict
          
          patterns = defaultdict(set)
          for test, error in csv.reader(sys.stdin):
              patterns[test].add(error)
          
          correlations = []
          for t1, t2 in itertools.combinations(patterns.keys(), 2):
              common = len(patterns[t1] & patterns[t2])
              if common > 0:
                  correlations.append((t1, t2, common))
          
          for t1, t2, count in sorted(correlations, key=lambda x: x[2], reverse=True):
              print(f"{t1} <-> {t2}: {count} common patterns")
          ' > correlations.txt

      - name: Generate Report
        run: |
          echo "# Error Pattern Correlations" > correlation_report.md
          echo "\`\`\`" >> correlation_report.md
          cat correlations.txt >> correlation_report.md
          echo "\`\`\`" >> correlation_report.md

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: correlation-report
          path: correlation_report.md

  analyze-fixes:
    name: Analyze Pattern Fixes
    needs: collect-patterns
    runs-on: ubuntu-latest
    steps:
      - name: Download Patterns
        uses: actions/download-artifact@v3
        with:
          name: error-patterns

      - name: Analyze Fixes
        run: |
          jq -r '[.test, .error] | @csv' patterns.json | \
          python3 -c '
          import sys, csv
          from collections import defaultdict
          
          fixes = defaultdict(list)
          for test, error in csv.reader(sys.stdin):
              if "fixed by" in error.lower():
                  fixes[error].append(test)
          
          for error, tests in sorted(fixes.items()):
              print(f"Error: {error}")
              print("Fixed in tests:")
              for test in tests:
                  print(f"  - {test}")
              print()
          ' > fixes.txt

      - name: Generate Report
        run: |
          echo "# Error Pattern Fixes" > fix_report.md
          echo "\`\`\`" >> fix_report.md
          cat fixes.txt >> fix_report.md
          echo "\`\`\`" >> fix_report.md

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: fix-report
          path: fix_report.md

  analyze-trends:
    name: Analyze Pattern Trends
    needs: collect-patterns
    runs-on: ubuntu-latest
    steps:
      - name: Download Patterns
        uses: actions/download-artifact@v3
        with:
          name: error-patterns

      - name: Analyze Trends
        run: |
          jq -r '[.test, .error] | @csv' patterns.json | \
          python3 -c '
          import sys, csv
          from collections import defaultdict
          
          trends = defaultdict(lambda: defaultdict(int))
          for test, error in csv.reader(sys.stdin):
              package = test.split(".")[0]
              trends[package][error] += 1
          
          for package, errors in sorted(trends.items()):
              print(f"Package: {package}")
              print("Error distribution:")
              for error, count in sorted(errors.items(), key=lambda x: x[1], reverse=True):
                  print(f"  {count:3d} - {error}")
              print()
          ' > trends.txt

      - name: Generate Report
        run: |
          echo "# Error Pattern Trends" > trend_report.md
          echo "\`\`\`" >> trend_report.md
          cat trends.txt >> trend_report.md
          echo "\`\`\`" >> trend_report.md

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: trend-report
          path: trend_report.md

  generate-insights:
    name: Generate Pattern Insights
    needs: [analyze-frequency, analyze-correlations, analyze-fixes, analyze-trends]
    runs-on: ubuntu-latest
    steps:
      - name: Download Reports
        uses: actions/download-artifact@v3

      - name: Generate Combined Report
        run: |
          echo "# Error Pattern Analysis Insights" > insights.md
          echo "## Analysis Configuration" >> insights.md
          echo "- Analysis Depth: ${{ github.event.inputs.analysis_depth || 3 }}" >> insights.md
          echo "- Date: $(date)" >> insights.md
          
          echo "## Frequency Analysis" >> insights.md
          cat frequency-report/frequency_report.md >> insights.md
          
          echo "## Pattern Correlations" >> insights.md
          cat correlation-report/correlation_report.md >> insights.md
          
          echo "## Fix Analysis" >> insights.md
          cat fix-report/fix_report.md >> insights.md
          
          echo "## Trend Analysis" >> insights.md
          cat trend-report/trend_report.md >> insights.md
          
          echo "## Recommendations" >> insights.md
          echo "Based on the analysis above:" >> insights.md
          python3 -c '
          import re
          
          def analyze_patterns():
              with open("frequency-report/frequency_report.md") as f:
                  freq = f.read()
              with open("correlation-report/correlation_report.md") as f:
                  corr = f.read()
              
              recommendations = []
              
              # Analyze frequency patterns
              if "syntax error" in freq.lower():
                  recommendations.append("- Consider adding syntax validation")
              if "undefined" in freq.lower():
                  recommendations.append("- Improve symbol resolution")
              if "context" in freq.lower():
                  recommendations.append("- Enhance context handling")
              
              # Analyze correlations
              if "common patterns" in corr.lower():
                  recommendations.append("- Look for shared error causes")
              
              return "\n".join(recommendations)
          
          print(analyze_patterns())
          ' >> insights.md

      - name: Upload Insights
        uses: actions/upload-artifact@v3
        with:
          name: pattern-insights
          path: insights.md

      - name: Post Results
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const insights = fs.readFileSync('insights.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: insights
            });
