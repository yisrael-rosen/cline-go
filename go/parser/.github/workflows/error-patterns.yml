name: Error Pattern Testing

on:
  schedule:
    - cron: '0 0 * * 6'  # Run every Saturday
  workflow_dispatch:
    inputs:
      pattern_count:
        description: 'Number of patterns to test'
        required: true
        default: '50'

jobs:
  common-patterns:
    name: Common Error Patterns
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Generate Pattern Tests
        run: |
          mkdir -p testdata/patterns
          
          # Missing imports
          cat > testdata/patterns/missing_imports.go << 'EOL'
          package test
          func Test() {
              fmt.Println("test")  // Missing "fmt" import
              http.Get("url")      // Missing "net/http" import
          }
          EOL
          
          # Undefined symbols
          cat > testdata/patterns/undefined_symbols.go << 'EOL'
          package test
          func Test() {
              undefinedVar++
              undefinedFunc()
              undefined.Field = 1
          }
          EOL
          
          # Type mismatches
          cat > testdata/patterns/type_mismatches.go << 'EOL'
          package test
          func Test() string {
              return 42        // Wrong return type
              var x string = 1 // Wrong assignment type
          }
          EOL

      - name: Test Pattern Handling
        run: |
          go test -v -run=TestCommonPatterns \
            -pattern-count=${{ github.event.inputs.pattern_count || 50 }} \
            ./parser/...

  syntax-patterns:
    name: Syntax Error Patterns
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Generate Pattern Tests
        run: |
          mkdir -p testdata/patterns
          
          # Missing braces
          cat > testdata/patterns/missing_braces.go << 'EOL'
          package test
          func Test() {
              if x == 1
                  fmt.Println("test")
              }
          EOL
          
          # Missing parentheses
          cat > testdata/patterns/missing_parens.go << 'EOL'
          package test
          func Test {  // Missing parentheses
              for i := 0; i < 10  // Missing parentheses
                  fmt.Println(i)
          }
          EOL
          
          # Invalid operators
          cat > testdata/patterns/invalid_operators.go << 'EOL'
          package test
          func Test() {
              x +== 1  // Invalid operator
              y =! 2   // Invalid operator
          }
          EOL

      - name: Test Pattern Handling
        run: |
          go test -v -run=TestSyntaxPatterns \
            -pattern-count=${{ github.event.inputs.pattern_count || 50 }} \
            ./parser/...

  semantic-patterns:
    name: Semantic Error Patterns
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Generate Pattern Tests
        run: |
          mkdir -p testdata/patterns
          
          # Interface mismatches
          cat > testdata/patterns/interface_mismatches.go << 'EOL'
          package test
          type Handler interface {
              Handle(context.Context) error
          }
          type Service struct{}
          func (s *Service) Handle() error {}  // Missing context parameter
          EOL
          
          # Method signature mismatches
          cat > testdata/patterns/method_mismatches.go << 'EOL'
          package test
          type Service struct{}
          func (s Service) Process() {}      // Non-pointer receiver
          func (s *Service) Handle(x int) {} // Wrong parameter type
          EOL
          
          # Visibility issues
          cat > testdata/patterns/visibility_issues.go << 'EOL'
          package test
          type service struct{}  // Unexported type
          func (s *service) PublicMethod() {}  // Public method on private type
          EOL

      - name: Test Pattern Handling
        run: |
          go test -v -run=TestSemanticPatterns \
            -pattern-count=${{ github.event.inputs.pattern_count || 50 }} \
            ./parser/...

  context-patterns:
    name: Context Error Patterns
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Generate Pattern Tests
        run: |
          mkdir -p testdata/patterns
          
          # Missing context
          cat > testdata/patterns/missing_context.go << 'EOL'
          package test
          func Process() error {  // Missing context parameter
              time.Sleep(time.Second)
              return nil
          }
          EOL
          
          # Wrong context position
          cat > testdata/patterns/wrong_context.go << 'EOL'
          package test
          func Process(data []byte, ctx context.Context) error {  // Context not first
              return nil
          }
          EOL
          
          # Context not propagated
          cat > testdata/patterns/context_propagation.go << 'EOL'
          package test
          func Process(ctx context.Context) error {
              return doWork()  // Context not propagated
          }
          func doWork() error { return nil }
          EOL

      - name: Test Pattern Handling
        run: |
          go test -v -run=TestContextPatterns \
            -pattern-count=${{ github.event.inputs.pattern_count || 50 }} \
            ./parser/...

  report:
    name: Generate Error Pattern Report
    needs: [common-patterns, syntax-patterns, semantic-patterns, context-patterns]
    runs-on: ubuntu-latest
    steps:
      - name: Collect Test Results
        run: |
          echo "# Error Pattern Results" > report.md
          echo "## Configuration" >> report.md
          echo "- Pattern Count: ${{ github.event.inputs.pattern_count || 50 }}" >> report.md
          
          echo "## Common Patterns" >> report.md
          go tool test2json ./parser/... | jq -r 'select(.Test | contains("TestCommonPatterns"))' >> report.md
          
          echo "## Syntax Patterns" >> report.md
          go tool test2json ./parser/... | jq -r 'select(.Test | contains("TestSyntaxPatterns"))' >> report.md
          
          echo "## Semantic Patterns" >> report.md
          go tool test2json ./parser/... | jq -r 'select(.Test | contains("TestSemanticPatterns"))' >> report.md
          
          echo "## Context Patterns" >> report.md
          go tool test2json ./parser/... | jq -r 'select(.Test | contains("TestContextPatterns"))' >> report.md

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: error-pattern-report
          path: report.md

      - name: Post Results
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
