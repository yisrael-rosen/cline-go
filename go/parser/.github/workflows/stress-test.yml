name: Stress Testing

on:
  schedule:
    - cron: '0 0 * * 2'  # Run every Tuesday
  workflow_dispatch:
    inputs:
      duration:
        description: 'Test duration in minutes'
        required: true
        default: '30'
      max_load:
        description: 'Maximum concurrent operations'
        required: true
        default: '1000'

jobs:
  stress-test:
    name: Run Stress Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Generate Large Test Files
        run: |
          mkdir -p testdata/stress-test
          # Generate extremely large files
          for size in 5000 10000 50000; do
            echo "Generating ${size} declarations..."
            cat > "testdata/stress-test/large_${size}.go" << EOL
            package test
            
            $(for i in $(seq 1 $size); do
              echo "func Process${i}(data []byte) error { return nil }"
              echo "type Type${i} struct { Field${i} string }"
              echo "var Var${i} = Process${i}"
            done)
            EOL
          done

      - name: Install k6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz | tar xz
          sudo cp k6-v0.45.0-linux-amd64/k6 /usr/local/bin

      - name: Create Stress Test Script
        run: |
          cat > stress-test.js << 'EOL'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          import { Rate } from 'k6/metrics';

          const errorRate = new Rate('error_rate');

          export const options = {
            stages: [
              { duration: '5m', target: 100 },   // Ramp up
              { duration: '10m', target: 500 },  // Increase load
              { duration: '10m', target: ${{ github.event.inputs.max_load || 1000 }} },  // Peak load
              { duration: '5m', target: 0 },     // Ramp down
            ],
            thresholds: {
              error_rate: ['rate<0.1'],
              http_req_duration: ['p(95)<1000'],
              http_req_failed: ['rate<0.05'],
            },
          };

          const files = [
            'large_5000.go',
            'large_10000.go',
            'large_50000.go'
          ];

          const operations = [
            {
              type: 'add-context',
              pattern: 'Process\\d+',
            },
            {
              type: 'add-tags',
              pattern: 'Type\\d+',
            },
            {
              type: 'implement-interface',
              pattern: 'Type\\d+',
            },
          ];

          export default function () {
            const file = files[Math.floor(Math.random() * files.length)];
            const op = operations[Math.floor(Math.random() * operations.length)];
            
            const payload = {
              file: `testdata/stress-test/${file}`,
              operation: op.type,
              pattern: op.pattern,
            };

            const res = http.post('http://localhost:8080/edit', JSON.stringify(payload), {
              headers: { 'Content-Type': 'application/json' },
              timeout: '30s',
            });

            const success = check(res, {
              'status is 200': (r) => r.status === 200,
              'response has success': (r) => r.json('success') === true,
            });

            errorRate.add(!success);
            sleep(0.1);
          }
          EOL

      - name: Start Server with Resource Limits
        run: |
          # Set resource limits
          ulimit -n 65535  # Increase file descriptor limit
          # Start server with memory limit
          docker run --memory=2g --cpus=2 \
            -v $(pwd):/app -w /app \
            golang:1.21 go run cmd/server/main.go &
          sleep 5  # Wait for server to start

      - name: Run Stress Test
        run: k6 run stress-test.js

      - name: Collect Resource Usage
        run: |
          echo "# Resource Usage During Test" > resource_usage.md
          echo "## Memory Usage" >> resource_usage.md
          free -h >> resource_usage.md
          echo "## CPU Usage" >> resource_usage.md
          top -b -n 1 >> resource_usage.md
          echo "## Disk Usage" >> resource_usage.md
          df -h >> resource_usage.md

      - name: Check for Memory Leaks
        run: |
          go test -v -run=TestMemoryLeaks \
            -memprofile=stress_mem.prof \
            -timeout=1h \
            ./parser/...
          go tool pprof -svg stress_mem.prof > stress_memory.svg

      - name: Check for Goroutine Leaks
        run: |
          go test -v -run=TestGoroutineLeaks \
            -timeout=1h \
            ./parser/...

      - name: Generate Report
        run: |
          echo "# Stress Test Results" > report.md
          echo "## Test Configuration" >> report.md
          echo "- Duration: ${{ github.event.inputs.duration || 30 }} minutes" >> report.md
          echo "- Max Load: ${{ github.event.inputs.max_load || 1000 }} concurrent operations" >> report.md
          echo "## Resource Usage" >> report.md
          cat resource_usage.md >> report.md
          echo "## Memory Profile" >> report.md
          echo "![Memory Profile](stress_memory.svg)" >> report.md

      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: stress-test-results
          path: |
            report.md
            resource_usage.md
            stress_mem.prof
            stress_memory.svg

      - name: Post Results
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  recovery-test:
    name: System Recovery Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Test Recovery
        run: |
          # Test recovery from out of memory
          go test -v -run=TestOutOfMemoryRecovery ./parser/...
          
          # Test recovery from panic
          go test -v -run=TestPanicRecovery ./parser/...
          
          # Test recovery from deadlock
          go test -v -run=TestDeadlockRecovery ./parser/...

      - name: Upload Recovery Results
        uses: actions/upload-artifact@v3
        with:
          name: recovery-test-results
          path: recovery_test.log
