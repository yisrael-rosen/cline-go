name: Chaos Testing

on:
  schedule:
    - cron: '0 0 * * 3'  # Run every Wednesday
  workflow_dispatch:
    inputs:
      duration:
        description: 'Test duration in minutes'
        required: true
        default: '30'

jobs:
  setup-chaos-mesh:
    name: Setup Chaos Mesh
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Kubernetes
        uses: helm/kind-action@v1.5.0
        with:
          cluster_name: chaos-cluster

      - name: Install Chaos Mesh
        run: |
          helm repo add chaos-mesh https://charts.chaos-mesh.org
          helm install chaos-mesh chaos-mesh/chaos-mesh --namespace=chaos-testing --create-namespace

  network-chaos:
    name: Network Chaos Test
    needs: setup-chaos-mesh
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy Application
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl wait --for=condition=available deployment/go-parser --timeout=300s

      - name: Apply Network Chaos
        run: |
          cat > network-chaos.yaml << 'EOL'
          apiVersion: chaos-mesh.org/v1alpha1
          kind: NetworkChaos
          metadata:
            name: network-delay
          spec:
            action: delay
            mode: one
            selector:
              namespaces:
                - default
              labelSelectors:
                app: go-parser
            delay:
              latency: "100ms"
              correlation: "100"
              jitter: "0ms"
          EOL
          kubectl apply -f network-chaos.yaml

      - name: Run Tests Under Network Chaos
        run: |
          go test -v -run=TestNetworkResilience ./parser/...

  pod-chaos:
    name: Pod Chaos Test
    needs: setup-chaos-mesh
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy Application
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl wait --for=condition=available deployment/go-parser --timeout=300s

      - name: Apply Pod Chaos
        run: |
          cat > pod-chaos.yaml << 'EOL'
          apiVersion: chaos-mesh.org/v1alpha1
          kind: PodChaos
          metadata:
            name: pod-failure
          spec:
            action: pod-failure
            mode: one
            selector:
              namespaces:
                - default
              labelSelectors:
                app: go-parser
            duration: "30s"
            scheduler:
              cron: "@every 1m"
          EOL
          kubectl apply -f pod-chaos.yaml

      - name: Run Tests Under Pod Chaos
        run: |
          go test -v -run=TestPodResilience ./parser/...

  resource-chaos:
    name: Resource Chaos Test
    needs: setup-chaos-mesh
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy Application
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl wait --for=condition=available deployment/go-parser --timeout=300s

      - name: Apply Resource Chaos
        run: |
          cat > resource-chaos.yaml << 'EOL'
          apiVersion: chaos-mesh.org/v1alpha1
          kind: StressChaos
          metadata:
            name: cpu-stress
          spec:
            mode: one
            selector:
              namespaces:
                - default
              labelSelectors:
                app: go-parser
            stressors:
              cpu:
                workers: 1
                load: 100
              memory:
                workers: 1
                size: "256MB"
          EOL
          kubectl apply -f resource-chaos.yaml

      - name: Run Tests Under Resource Chaos
        run: |
          go test -v -run=TestResourceResilience ./parser/...

  io-chaos:
    name: I/O Chaos Test
    needs: setup-chaos-mesh
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy Application
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl wait --for=condition=available deployment/go-parser --timeout=300s

      - name: Apply I/O Chaos
        run: |
          cat > io-chaos.yaml << 'EOL'
          apiVersion: chaos-mesh.org/v1alpha1
          kind: IOChaos
          metadata:
            name: io-delay
          spec:
            action: latency
            mode: one
            selector:
              namespaces:
                - default
              labelSelectors:
                app: go-parser
            delay: "100ms"
            path: "/tmp"
            percent: 100
          EOL
          kubectl apply -f io-chaos.yaml

      - name: Run Tests Under I/O Chaos
        run: |
          go test -v -run=TestIOResilience ./parser/...

  report:
    name: Generate Chaos Test Report
    needs: [network-chaos, pod-chaos, resource-chaos, io-chaos]
    runs-on: ubuntu-latest
    steps:
      - name: Collect Test Results
        run: |
          echo "# Chaos Test Results" > report.md
          echo "## Test Duration: ${{ github.event.inputs.duration || 30 }} minutes" >> report.md
          
          echo "## Network Chaos Results" >> report.md
          kubectl logs -l app=go-parser --tail=100 >> report.md
          
          echo "## Pod Chaos Results" >> report.md
          kubectl get events --field-selector involvedObject.kind=Pod >> report.md
          
          echo "## Resource Chaos Results" >> report.md
          kubectl top pods >> report.md

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: chaos-test-report
          path: report.md

      - name: Post Results
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
